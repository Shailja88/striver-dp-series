//memoization
#include<bits/stdc++.h>
using namespace std;
int fun(int arr[],int n, int i,int prev,vector<vector<int>>&dp){
       //base case
       if(i>=n)return 0;
       if(dp[i][prev+1]!=-1)return dp[i][prev+1];
       //not take
        int len=fun(arr,n,i+1,prev,dp);
        //take
        if(prev==-1|| arr[i]>arr[prev])
        len=max(len,1+fun(arr,n,i+1,i,dp));
      return  dp[i][prev+1]=len;

}
int longestIncreasingSubsequence(int arr[], int n)
{
    // Write Your Code here
    vector<vector<int>>dp(n,vector<int>(n+1,-1));
    return fun(arr,n,0,-1,dp);
}
//tabulation
#include<bits/stdc++.h>
using namespace std;

int longestIncreasingSubsequence(int arr[], int n)
{
    // Write Your Code here
    vector<vector<int>>dp(n+1,vector<int>(n+1,0));
    for(int i=n-1;i>=0;i--){
        for(int prev=i-1;prev>=-1;prev--){
            int len=dp[i+1][prev+1];
        //take
        if(prev==-1|| arr[i]>arr[prev])
        len=max(len,1+dp[i+1][i+1]);
        dp[i][prev+1]=len;
       }
       
    }

    return dp[0][0];
   
}
//space optimization
#include<bits/stdc++.h>
using namespace std;

int longestIncreasingSubsequence(int arr[], int n)
{
    // Write Your Code here
   vector<int>after(n+1,0),curr(n+1,0);
    for(int i=n-1;i>=0;i--){
        for(int prev=i-1;prev>=-1;prev--){
            int len=after[prev+1];
        //take
        if(prev==-1|| arr[i]>arr[prev])
        len=max(len,1+after[i+1]);
        curr[prev+1]=len;
       }
       after=curr;
    }

    return after[0];
   
}
////////////////
#include<bits/stdc++.h>
int longestIncreasingSubsequence(int arr[], int n)
{
    // Write Your Code here
    vector<int>dp(n,1);
    for(int i=0;i<n;i++){
        for(int j=0;j<i;j++){
           if(arr[j] < arr[i])
              {
                  dp[i]=max(dp[i],dp[j]+1);
              }
        }
    }
    int maxi=1;
    
    for(int i=0;i<n;i++){
           if(dp[i]>maxi)
               maxi=dp[i];
               
           }
    return maxi;
}
///printing longest increasing subsequence 
#include<bits/stdc++.h>
int longestIncreasingSubsequence(int arr[], int n)
{
       int maxi=1;
       int lastIndex=0;
    vector<int>dp(n,1),hash(n);
    for(int i=0;i<n;i++){
        hash[i]=i;
        for(int j=0;j<i;j++){
           if(arr[j] < arr[i] && dp[i]<dp[j]+1)
              {
                  dp[i]=(dp[j]+1);
                  hash[i]=j;
              }
        }
        if(dp[i]>maxi){
            maxi=dp[i];
            lastIndex=i;
        }
    }
  vector<int>v;
  v.push_back(arr[lastIndex]);
  while(hash[lastIndex]!=lastIndex){
       lastIndex=hash[lastIndex];
        v.push_back(arr[lastIndex]);
}
       reverse(v.begin(),v.end());
 for(auto in:v){
     cout<<in<<" ";
 }
return maxi;
}
#include <bits/stdc++.h>
using namespace std;

int longestIncreasingSubsequence(int arr[], int n)
{
    // binary search TC=O(nlogn) SC=O(n)
    vector<int>temp;
    temp.push_back(arr[0]);
    int leng=1;
    for(int i=1;i<n;i++){
       if(arr[i]>temp.back()){
           temp.push_back(arr[i]);
           leng++;
       }
    else{
     int ind=lower_bound(temp.begin(), temp.end(), arr[i])-temp.begin();

      temp[ind]=arr[i];

    }


    }
    return leng;

}
